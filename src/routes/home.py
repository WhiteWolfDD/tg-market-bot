import os
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.utils.i18n import gettext as _
from aiogram.utils.i18n import lazy_gettext as __

from src.callbacks.admin import ViewExceptionLogCallback, DeleteExceptionLogsCallback
from src.routes.advertisement import start_post_ad
from src.routes.category import show_categories, get_categories
from src.utils.helpers import escape_markdown

router = Router()


async def home_page(fullname: str, is_admin: bool = False) -> tuple[str, ReplyKeyboardMarkup]:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    msg = (
        _("üëã Hello, *{username}*.\nI'm *Seller ‚Äî curator of your ads*.\n\n"
          'üåü Here you can post your *ads* for *selling* your product.')
    ).format(username=fullname)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard_buttons = [
        [KeyboardButton(text=_('üì§ Post an ad')), KeyboardButton(text=_('üì¶ My ads'))],
        [KeyboardButton(text='üìö FAQ'), KeyboardButton(text=_('üåê Language'))]
    ]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if is_admin:
        keyboard_buttons.insert(1, [KeyboardButton(text=_('üì¶ Requested ads')), KeyboardButton(text=_('üìú Error logs'))])
        keyboard_buttons.insert(2,
                                [KeyboardButton(text=_('üìù Manage Categories')), KeyboardButton(text=_('üìä Statistics'))])

    kbd = ReplyKeyboardMarkup(
        keyboard=keyboard_buttons,
        resize_keyboard=True
    )

    return msg, kbd


@router.message(CommandStart())
async def start(message: Message, state: FSMContext) -> None:
    """
    Handler for the /start command.
    """

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ deep_link
    deep_link = message.text.split(" ")[1] if len(message.text.split(" ")) > 1 else None
    if deep_link == "post_ad":
        await start_post_ad(message, state)
    else:
        await go_home(message, state)


async def go_home(message: Message, state: FSMContext) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (–∞–¥–º–∏–Ω/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å).
    """
    if state:
        await state.clear()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    admins = os.getenv('ADMIN_ID').split(',')
    is_admin = str(message.from_user.id) in admins

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    msg, kbd = await home_page(fullname=message.from_user.full_name, is_admin=is_admin)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(escape_markdown(text=msg), reply_markup=kbd)


@router.message(F.text == __('üìù Manage Categories'))
async def handle_manage_categories(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤).
    """
    admins = os.getenv('ADMIN_ID').split(',')
    if str(message.from_user.id) in admins:
        await manage_categories(message, state)
    else:
        await message.answer(
            text=escape_markdown(
                _('‚ùå You do not have access to this command.')
            )
        )


@router.message(F.text == __('üì¶ Requested ads'))
@router.message(F.text == __('üìú Error logs'))
async def handle_admin_commands(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    admins = os.getenv('ADMIN_ID').split(',')
    if str(message.from_user.id) not in admins:
        await message.answer(
            text=escape_markdown(
                _('‚ùå You do not have access to this command.')
            )
        )
        return

    if message.text == _('üìú Error logs'):
        await view_exception_logs(message)
    elif message.text == _('üì¶ Requested ads'):
        await message.answer(
            text=escape_markdown(
                _('üöß This feature is under construction.')
            )
        )


async def manage_categories(message: Message, state: FSMContext) -> None:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    categories = await get_categories()
    await state.clear()
    await state.update_data(categories=categories)
    user_language = message.from_user.language_code or 'en'
    await show_categories(message, categories, user_language, state, parent_id=None)


@router.message(F.text == __('üìú Error logs'))
async def view_exception_logs(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await message.answer(
        text=escape_markdown(
            _('üìú *Exception Logs*\n\nüöß This feature is under construction.')
        )
    )


@router.callback_query(DeleteExceptionLogsCallback.filter())
async def delete_exception_logs(query: CallbackQuery) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)."""
    await query.answer(
        text=escape_markdown(
            _('üöß This feature is under construction.')
        )
    )


@router.callback_query(ViewExceptionLogCallback.filter())
async def view_exception_log(query: CallbackQuery) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–∞ –æ—à–∏–±–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)."""
    await query.answer(
        text=escape_markdown(
            _('üöß This feature is under construction.')
        )
    )
